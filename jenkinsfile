      pipeline {
        agent none
        stages {
          stage("build & SonarQube Scanner") {
            agent any
            stage('SonarQube Analysis') {
    steps {
        script {
            def scannerHome = tool 'SonarQubeScanner'; // Define the SonarQube Scanner tool

            // Set SonarQube server authentication token
            withSonarQubeEnv('SonarQube Scanner') {
                // Replace 'YOUR_TOKEN_HERE' with the generated token
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.login=sqa_43af5cbc20941715354ff009ee78141c16dd9ea3"
            }
        }
    }
}

            steps {
              withSonarQubeEnv('SonarQube Scanner') {
                sh 'mvn clean package sonar:sonar'
              }
            }
          }
          stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }
        }
      }
